# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: .NET

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:

    runs-on: ubuntu-latest
    name: Build Application
    strategy:
      matrix:
        dotnet-version: [ '8.0.x' ]

    steps:
    - name: Checkout all the submodules
      uses: actions/checkout@v2
      with:
        submodules: recursive
    - name: Setup dotnet ${{ matrix.dotnet-version }}
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ matrix.dotnet-version }}
    - name: Restore dependencies ${{ matrix.dotnet-version }}
      run: dotnet restore
    - name: Build ${{ matrix.dotnet-version }}
      run: dotnet build /p:EnableWindowsTargeting=true --no-restore
    - name: Test ${{ matrix.dotnet-version }}
      run: dotnet test --no-build --verbosity normal
      # Upload the MSIX package: https://github.com/marketplace/actions/upload-a-build-artifact
    - name: Publish ${{ matrix.dotnet-version }}
      run: dotnet publish "Echosync/Echosync.csproj" -c Release -o release --nologo | zip -r Echosync/Echosync/release/Echosync.zip Echosync/Echosync/release/
    - name: Get version
      id: package_version
      uses: KageKirin/get-csproj-version@v1.0.0
      with:
          file: "Echosync/Echosync.csproj" # Specify your .csproj file path
    - name: Create Release
      id: create_release
      uses: comnoco/create-release@v2
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
          tag_name: ${{ steps.package_version.outputs.version }}
          release_name: Echosync v.${{ steps.package_version.outputs.version }}
          body_path: Echosync/Echosync/Changelog.md 
          draft: false
          prerelease: false
    - name: Upload Release Asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: Echosync/Echosync/release/Echosync.zip
          asset_name: Echosync.zip
          asset_content_type: application/zip
