name: Build Plugin Release

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:

    runs-on: ubuntu-latest
    name: Build Application
    strategy:
      matrix:
        dotnet-version: [ '8.0.x' ]

    steps:
    - name: Checkout all the submodules
      uses: actions/checkout@v2
      with:
        submodules: recursive
        
    - name: Create Source-Code Zip
      uses: montudor/action-zip@v1
      with:
        args: zip -qq -r "Source Code.zip" Echosync
        
    - uses: bbonkr/get-version-action@v1
      id: get_version
      with:
          project: 'Echosync/Echosync.csproj'
          show_log_message: true

    - name: Determine Dalamud Branch
      id: branch
      run: |
        if [[ -n "${{ github.event.inputs.dalamud_branch }}" ]]; then
          echo "branch=${{ github.event.inputs.dalamud_branch }}" >> $GITHUB_OUTPUT
        elif [[ "${{ github.event.ref }}" == "refs/heads/stg" ]] || [[ "${{ github.event.head_commit.message }}" == "[stg]"* ]]; then
          echo "branch=stg" >> $GITHUB_OUTPUT
        else
          echo "branch=master" >> $GITHUB_OUTPUT
        fi

    - name: Download Dalamud
      env:
        DALAMUD_URL: >
            ${{ fromJson('{
              "master": "https://goatcorp.github.io/dalamud-distrib/latest.zip",
              "stg": "https://goatcorp.github.io/dalamud-distrib/stg/latest.zip"
            }')[steps.branch.outputs.branch] }}
      run: |
        curl -o latest.zip ${{ env.DALAMUD_URL }}
        mkdir -p ~/.xlcore/dalamud/Hooks/dev/
        unzip latest.zip -d ~/.xlcore/dalamud/Hooks/dev/
        
    - name: Setup dotnet
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ matrix.dotnet-version }}
        
    - name: Restore dependencies
      run: dotnet restore "Echosync/Echosync.csproj"
      
    - name: Build
      run: dotnet build /p:EnableWindowsTargeting=true --no-restore
      
    - name: Test
      run: dotnet test --no-build --verbosity normal
      
    - name: Publish
      run: dotnet publish "Echosync/Echosync.csproj" -c Release -o release --nologo
      
    - name: Zip it
      run: zip -r Echosync.zip Echosync/release/

    - name: Create release for v${{steps.get_version.outputs.version}}
      uses: ncipollo/release-action@v1
      with:
          tag: ${{steps.get_version.outputs.version}}
          name: Echosync v${{steps.get_version.outputs.version}}
          artifacts: "Source Code.zip,Echosync.zip"
          bodyFile: "Echosync/Changelog.md"
